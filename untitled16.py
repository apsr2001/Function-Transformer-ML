# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JYWrBNzPaKkbFIVspAGHb0OllTfqw-43
"""

import numpy as np
import pandas as pd

df=pd.read_csv("/content/covid_toy.csv")

df.head()

from sklearn.preprocessing import FunctionTransformer
import numpy as np

x=np.array([[1,2],[3,4]])
log_transform=FunctionTransformer(np.log1p)
x_transformed=log_transform.transform(x)
print(x_transformed)

from sklearn.preprocessing import FunctionTransformer
import numpy as np

x=np.array([[1,2],[3,4]])
def my_feature_engineering(x):
    return np.hstack((x,x**2))
custom_transformer=FunctionTransformer(my_feature_engineering)
x_transformed=custom_transformer.transform(x)
print(x_transformed)

from sklearn.preprocessing import FunctionTransformer
import numpy as np

x=np.array([[1,2],[3,4]])
def my_scaling(x):
    return x/np.max(x)
custom_transformer=FunctionTransformer(my_scaling)
x_transformed=custom_transformer.transform(x)
print(x_transformed)

from sklearn.preprocessing import FunctionTransformer
import numpy as np

x=np.array([[1,2],[3,np.nan]])
def my_cleaning(x):
    x[np.isnan(x)]=0
    return x
custom_transformer=FunctionTransformer(my_cleaning)
x_transformed=custom_transformer.transform(x)
print(x_transformed)

from sklearn.decomposition import PCA
from sklearn.preprocessing import FunctionTransformer
import numpy as np

x=np.array([[1,2],[3,4]])
def my_pca(x):
    pca=PCA(n_components=1)
    x_pca=pca.fit_transform(x)
    return x_pca
custom_transformer=FunctionTransformer(my_pca)
x_transformed=custom_transformer.transform(x)
print(x_transformed)

import numpy as np
import pandas as pd

df=pd.read_csv("/content/covid_toy.csv")

df.head(3)

from sklearn.impute import SimpleImputer

si=SimpleImputer(strategy="mean")

df['fever']=si.fit_transform(df[['fever']])

df.isnull().sum()

df.head(3)

from sklearn.preprocessing import LabelEncoder

lb=LabelEncoder()

df['gender']=lb.fit_transform(df['gender'])
df['cough']=lb.fit_transform(df['cough'])
df['city']=lb.fit_transform(df['city'])
df['has_covid']=lb.fit_transform(df['has_covid'])

df.head()

x=df.drop(columns=['has_covid'],axis=1)
y=df['has_covid']

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y=test=train_test_split(x,y,test_size=0.2,random_state=42)

x_train.head(4)

from sklearn.preprocessing import FunctionTransformer

ft=FunctionTransformer(np.log1p)

x_train_transformed=ft.fit_transform(x_train)

x_train_transformed

